{"/home/usuario/practicas/practica9/ull-esit-inf-dsi-22-23-prct09-funko-app-alu0101601830/src/Mochila.ts":{"path":"/home/usuario/practicas/practica9/ull-esit-inf-dsi-22-23-prct09-funko-app-alu0101601830/src/Mochila.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":4,"column":11},"end":{"line":4,"column":24}},"3":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"4":{"start":{"line":18,"column":12},"end":{"line":18,"column":77}},"5":{"start":{"line":20,"column":21},"end":{"line":20,"column":54}},"6":{"start":{"line":21,"column":26},"end":{"line":21,"column":72}},"7":{"start":{"line":23,"column":8},"end":{"line":33,"column":9}},"8":{"start":{"line":24,"column":54},"end":{"line":24,"column":80}},"9":{"start":{"line":25,"column":12},"end":{"line":25,"column":43}},"10":{"start":{"line":27,"column":13},"end":{"line":33,"column":9}},"11":{"start":{"line":28,"column":54},"end":{"line":28,"column":81}},"12":{"start":{"line":29,"column":12},"end":{"line":29,"column":43}},"13":{"start":{"line":32,"column":12},"end":{"line":32,"column":64}},"14":{"start":{"line":34,"column":27},"end":{"line":34,"column":74}},"15":{"start":{"line":34,"column":55},"end":{"line":34,"column":73}},"16":{"start":{"line":35,"column":22},"end":{"line":35,"column":64}},"17":{"start":{"line":35,"column":50},"end":{"line":35,"column":63}},"18":{"start":{"line":36,"column":8},"end":{"line":36,"column":37}},"19":{"start":{"line":50,"column":8},"end":{"line":50,"column":51}},"20":{"start":{"line":58,"column":22},"end":{"line":58,"column":45}},"21":{"start":{"line":59,"column":26},"end":{"line":59,"column":44}},"22":{"start":{"line":60,"column":28},"end":{"line":60,"column":46}},"23":{"start":{"line":61,"column":26},"end":{"line":64,"column":10}},"24":{"start":{"line":62,"column":38},"end":{"line":62,"column":65}},"25":{"start":{"line":63,"column":12},"end":{"line":63,"column":63}},"26":{"start":{"line":65,"column":8},"end":{"line":65,"column":40}},"27":{"start":{"line":68,"column":0},"end":{"line":68,"column":32}},"28":{"start":{"line":80,"column":8},"end":{"line":80,"column":51}},"29":{"start":{"line":88,"column":25},"end":{"line":88,"column":41}},"30":{"start":{"line":89,"column":26},"end":{"line":89,"column":44}},"31":{"start":{"line":90,"column":26},"end":{"line":94,"column":11}},"32":{"start":{"line":90,"column":64},"end":{"line":94,"column":9}},"33":{"start":{"line":95,"column":8},"end":{"line":95,"column":40}},"34":{"start":{"line":98,"column":0},"end":{"line":98,"column":34}},"35":{"start":{"line":99,"column":21},"end":{"line":99,"column":37}},"36":{"start":{"line":100,"column":21},"end":{"line":100,"column":66}},"37":{"start":{"line":101,"column":0},"end":{"line":101,"column":26}},"38":{"start":{"line":102,"column":22},"end":{"line":102,"column":39}},"39":{"start":{"line":103,"column":22},"end":{"line":103,"column":69}},"40":{"start":{"line":104,"column":0},"end":{"line":104,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":23},"end":{"line":37,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":34,"column":41},"end":{"line":34,"column":42}},"loc":{"start":{"line":34,"column":55},"end":{"line":34,"column":73}},"line":34},"2":{"name":"(anonymous_2)","decl":{"start":{"line":35,"column":36},"end":{"line":35,"column":37}},"loc":{"start":{"line":35,"column":50},"end":{"line":35,"column":63}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":27},"end":{"line":51,"column":5}},"line":49},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":26},"end":{"line":66,"column":5}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":61,"column":45},"end":{"line":61,"column":46}},"loc":{"start":{"line":61,"column":62},"end":{"line":64,"column":9}},"line":61},"6":{"name":"(anonymous_6)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":26},"end":{"line":81,"column":5}},"line":79},"7":{"name":"(anonymous_7)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":27},"end":{"line":96,"column":5}},"line":87},"8":{"name":"(anonymous_8)","decl":{"start":{"line":90,"column":49},"end":{"line":90,"column":50}},"loc":{"start":{"line":90,"column":64},"end":{"line":94,"column":9}},"line":90}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},{"start":{"line":17,"column":8},"end":{"line":19,"column":9}}],"line":17},"1":{"loc":{"start":{"line":21,"column":26},"end":{"line":21,"column":72}},"type":"binary-expr","locations":[{"start":{"line":21,"column":26},"end":{"line":21,"column":66}},{"start":{"line":21,"column":70},"end":{"line":21,"column":72}}],"line":21},"2":{"loc":{"start":{"line":23,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":33,"column":9}},{"start":{"line":23,"column":8},"end":{"line":33,"column":9}}],"line":23},"3":{"loc":{"start":{"line":27,"column":13},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":13},"end":{"line":33,"column":9}},{"start":{"line":27,"column":13},"end":{"line":33,"column":9}}],"line":27}},"s":{"0":1,"1":1,"2":1,"3":7,"4":2,"5":5,"6":5,"7":5,"8":2,"9":2,"10":3,"11":2,"12":2,"13":1,"14":4,"15":20,"16":4,"17":20,"18":4,"19":0,"20":2,"21":2,"22":2,"23":2,"24":10,"25":10,"26":2,"27":1,"28":0,"29":2,"30":2,"31":2,"32":10,"33":2,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1},"f":{"0":7,"1":20,"2":20,"3":0,"4":2,"5":10,"6":0,"7":2,"8":10},"b":{"0":[2,5],"1":[5,0],"2":[2,3],"3":[2,1]},"inputSourceMap":{"version":3,"file":"/home/usuario/practicas/practica9/ull-esit-inf-dsi-22-23-prct09-funko-app-alu0101601830/src/Mochila.ts","sources":["/home/usuario/practicas/practica9/ull-esit-inf-dsi-22-23-prct09-funko-app-alu0101601830/src/Mochila.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\n\n/**\n * Elementos de la mochila\n * @type\n */\ntype ElementoMochila = {\n  numElemento: number;\n  peso: number;\n  beneficio: number;\n};\n\n/**\n * Clase abstracta para representar una mochila\n * @abstract\n */\nabstract class Mochila {\n  /**\n   * Método abstracto para extraer datos de un archivo CSV\n   * @param data - Datos en formato CSV\n   * @returns Objeto con la capacidad y los elementos de la mochila\n   */\n  protected abstract extraerDatosCSV(data: string): { capacidad: number; elementos: ElementoMochila[] };\n  /**\n   * Método abstracto para extraer datos de un archivo JSON\n   * @param data - Datos en formato JSON\n   * @returns Objeto con la capacidad y los elementos de la mochila\n   */\n  protected abstract extraerDatosJSON(data: string): { capacidad: number; elementos: ElementoMochila[] };\n\n  /**\n   * Método para procesar un archivo de datos y obtener los beneficios y pesos de los elementos de la mochila\n   * @param filePath - Ruta del archivo de datos\n   * @returns  Objeto con los beneficios y pesos de los elementos de la mochila\n   * @throws Error si el archivo no existe o el formato no es soportado\n   */\n  public procesar(filePath: string): { beneficios: number[]; pesos: number[] } {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('El archivo no existe en la ruta especificada.');\n    }\n    const data = fs.readFileSync(filePath, 'utf8');\n    const extension = filePath.split('.').pop()?.toLowerCase() || '';\n    let elementos: ElementoMochila[];\n\n    if (extension === 'csv') {\n      const { elementos: elementosExtraidos } = this.extraerDatosCSV(data);\n      elementos = elementosExtraidos;\n    } else if (extension === 'json') {\n      const { elementos: elementosExtraidos } = this.extraerDatosJSON(data);\n      elementos = elementosExtraidos;\n    } else {\n      throw new Error('Formato de archivo no soportado.');\n    }\n\n    const beneficios = elementos.map((elemento) => elemento.beneficio);\n    const pesos = elementos.map((elemento) => elemento.peso);\n\n    return { beneficios, pesos };\n  }\n}\n\n/**\n * Clase concreta para representar una mochila con datos en formato CSV\n * @extends Mochila\n */\nexport class MochilaCSV extends Mochila {\n  /**\n   * Método implementado en la otra clase\n   * @param data - Datos en formato JSON\n   * @throws Error por no estar implementado\n   */\n  protected extraerDatosJSON(data: string): { capacidad: number; elementos: ElementoMochila[]; } {\n      throw new Error('Method not implemented.');\n  }\n  /**\n   * Método para extraer datos de un archivo CSV\n   * @param data - Datos en formato CSV\n   * @returns Objeto con la capacidad y los elementos de la mochila\n   */\n  protected extraerDatosCSV(data: string): { capacidad: number; elementos: ElementoMochila[] } {\n    const lines = data.trim().split('\\n');\n    const capacidad = parseInt(lines[0]);\n    const numElemento = parseInt(lines[1]);\n\n    const elementos: ElementoMochila[] = lines.slice(2).map((line, index) => {\n      const [beneficio, peso] = line.split(' ').map(Number);\n      return { numElemento: index + 1, beneficio, peso };\n    });\n\n    return { capacidad, elementos };\n  }\n}\n\n/**\n * Clase concreta para representar una mochila con datos en formato JSON\n * @extends Mochila\n */\nexport class MochilaJSON extends Mochila {\n  /**\n   * Método implementado en la otra clase\n   * @param data - Datos en formato CSV\n   * @throws Error por no estar implementado\n   */\n  protected extraerDatosCSV(data: string): { capacidad: number; elementos: ElementoMochila[]; } {\n      throw new Error('Method not implemented.');\n  }\n  /**\n   * Método para extraer datos de un archivo JSON\n   * @param data - Datos en formato JSON\n   * @returns Objeto con la capacidad y los elementos de la mochila\n   */\n  protected extraerDatosJSON(data: string): { capacidad: number; elementos: ElementoMochila[] } {\n    const jsonData = JSON.parse(data);\n    const capacidad = jsonData.capacidad;\n    const elementos: ElementoMochila[] = jsonData.elementos.map((elemento: any) => ({\n      numElemento: elemento.numElemento,\n      peso: elemento.peso,\n      beneficio: elemento.beneficio,\n    }));\n\n    return { capacidad, elementos };\n  }\n}\n\n\nconst extractorCSV = new MochilaCSV();\nconst resultadoCSV = extractorCSV.procesar('src/data/archivo.csv'); \nconsole.log(resultadoCSV);\n\nconst extractorJSON = new MochilaJSON();\nconst resultadoJSON = extractorJSON.procesar('src/data/archivo.json');\nconsole.log(resultadoJSON);\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0e7339229c835cf52edee16e76907eda4187c8c7","contentHash":"34ced92c8c3c30840caa763fbbe67e7dc23cf9c1a93c990fcf5c5d91825f039f"}}